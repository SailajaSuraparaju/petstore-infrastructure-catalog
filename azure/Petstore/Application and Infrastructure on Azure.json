{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"applicationTag": {
			"type": "string",
			"metadata": {
				"description": "Select an application tag for cam purposes"
			},
			"defaultValue": "petstore",
			"allowedValues": ["petstore"]
		},
		"projectTag": {
			"type": "string",
			"metadata": {
				"description": "Select a project tag tag for cam purposes"
			},
			"defaultValue": "alpha",
			"allowedValues": ["alpha", "bravo", "charlie"]
		},
		"kubernetesClusterName": {
			"type": "string",
			"metadata": {
				"description": "Enter the name of Azure Kubernetes Service Cluster it should contain, only letters, numbers, underscores, and hyphens. The name must start and end with a letter or number."
			},
			"defaultValue": "petstorAKSCluster"
		},
		"kubernetesVersion": {
			"type": "string",
			"metadata": {
				"description": "Kubernetes cluster version. Default is set to 1.21.9"
			},
			"defaultValue": "1.21.9"
		},
		"dnsNamePrefix": {
			"type": "string",
			"metadata": {
				"description": "DNS name prefix to use with the hosted Kubernetes API server FQDN. You will use this to connect to the Kubernetes API when managing containers after creating the cluster. Optional DNS prefix to use with hosted Kubernetes API server FQDN. The DNS prefix must be between 1 and 54 characters long. The prefix can contain only lowercase letters, numbers, and hyphens. The prefix must start with a letter and end with a letter or a number."
			},
			"defaultValue": "petstorAKSDNS"
		},
		"newLogAnalyticsWorkspaceRequired": {
			"type": "string",
			"defaultValue": "Yes",
			"allowedValues": ["Yes"],
			"metadata": {
				"description": "Select Yes to create a new Log Analytics Workspace. Select an existing analytics workspaces is disabled"
			}
		},
		"workspaceName": {
			"type": "string",
			"defaultValue": "petstorAKSWS",
			"metadata": {
				"description": "Enter the name of the workspace. The Workspace name should be between 4-63 characters. It must only contain lowercase letters, numbers, hyphens and must not start & end with a hyphen."
			}
		},
		"administratorLogin": {
			"type": "string",
			"metadata": {
				"description": "Database administrator login name. Admin Username Character range should be between 1-16 characters. It must only contain lowercase letters, numbers. Disallowed values: administrator, admin, root, guest, public, azure_superuser."
			},
			"defaultValue": "Adminazuredb1"
		},
		"administratorLoginPassword": {
			"type": "string",
			"defaultValue": "Passw0rd1",
			"allowedValues": ["Passw0rd1"],
			"minLength": 8,
			"maxLength": 128,
			"metadata": {
				"description": "Database administrator password. It must contain characters from three of the following categories - English uppercase letters, English lowercase letters, numbers (0-9), and non-alphanumeric characters (!, $, #, %, etc.). It must be between 8 & 128 characters.",
				"pattern": "((?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])|(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])).{8,}"
			}
		},
		"serverName": {
			"type": "string",
			"metadata": {
				"description": "Server Name for MySQL.The server name must be between 3-63 characters. It must only contain lowercase letters, numbers, hyphens and must not start & end with a hyphen."
			},
			"defaultValue": "petstorAKSDB"
		}
	},
	"variables": {
		"resourceLocation": "[resourceGroup().location]",
		"workspaceRegion": "[resourceGroup().location]",
		"skuFamily": "Gen5",
		"dataSource": "None",
		"skuTier": "Basic",
		"backupRetentionDays": "7",
		"skuCapacity": "[int(if(equals(variables('skuTier'),'GeneralPurpose'),'4', if(equals(variables('skuTier'),'Basic'),'2', '4')))]",
		"generalskuName": "[concat('GP', '_', variables('skuFamily'),'_', variables('skuCapacity'))]",
		"basicskuName": "[concat('B', '_', variables('skuFamily'),'_', variables('skuCapacity'))]",
		"moskuName": "[concat('MO', '_', variables('skuFamily'),'_', variables('skuCapacity'))]",
		"skuName": "[if(equals(variables('dataSource'),'None'),if(equals(variables('skuTier'),'GeneralPurpose'),variables('generalskuName'), if(equals(variables('skuTier'),'Basic'),variables('basicskuName') , variables('moskuName'))) , variables('moskuName'))]",
		"skuSize": "[if(equals(variables('dataSource'),'None'),if(equals(variables('skuTier'),'Basic'),10, 50), 'None')]",
		"skuSizeInMB": "[mul(variables('skuSize'), 1024)]",
		"backupRedundancyOptionsForBackupServer": "Locally Redundant",
		"backupRedundancyOptions": "Locally Redundant",
		"redunduntOption": "[if(equals(variables('dataSource'),'None'),if(equals(variables('backupRedundancyOptions'), 'Locally Redundant'),'Disabled', 'Enabled'), if(equals(variables('backupRedundancyOptionsForBackupServer'), 'Locally Redundant'),'Disabled', 'Enabled'))]",
		"storageAutoGrowValue": "Enabled",
		"properties1": {
			"version": "5.7",
			"administratorLogin": "[parameters('administratorLogin')]",
			"administratorLoginPassword": "[parameters('administratorLoginPassword')]",
			"storageProfile": {
				"storageMB": "[variables('skuSizeInMB')]",
				"backupRetentionDays": "[variables('backupRetentionDays')]",
				"geoRedundantBackup": "[variables('redunduntOption')]",
				"storageAutoGrow": "[variables('storageAutoGrowValue')]"
			},
			"previewFeature": "",
			"sslEnforcement": "Disabled",
			"infrastructureEncryption": "Disabled"
		},
		"properties": "[variables('properties1')]",
		"primaryPoolOSType": "Linux",
		"authenticationMethod": "false",
		"enableOmsAgent": "true",
		"enableRBAC": "false",
		"enableHttpApplicationRouting": "true",
		"enablePrivateCluster": "false",
		"resourceVirtualNetworkName": "dummy",
		"resourceSubnetName": "dummy",
		"resourceSubnetPrefix": "10.0.0.0/24",
		"vnetSubnetID": "dummy",
		"networkPlugin": "kubenet",
		"resourceServiceCidr": "[json('null')]",
		"resourceDnsServiceIP": "[json('null')]",
		"resourceDockerBridgeCidr": "[json('null')]",
		"networkPolicy": "None",
		"networkProfileForBasicNetworkPluginWithoutNetorkPolicy": {
			"loadBalancerSku": "standard",
			"networkPlugin": "[variables('networkPlugin')]"
		},
		"networkProfileForBasicNetworkPluginWithNetorkPolicy": {
			"loadBalancerSku": "standard",
			"networkPlugin": "[variables('networkPlugin')]",
			"networkPolicy": "None"
		},
		"networkProfileForAdvanceNetworkPluginWithoutNetorkPolicy": {
			"loadBalancerSku": "standard",
			"networkPlugin": "[variables('networkPlugin')]",
			"serviceCidr": "[variables('resourceServiceCidr')]",
			"dnsServiceIP": "[variables('resourceDnsServiceIP')]",
			"dockerBridgeCidr": "[variables('resourceDockerBridgeCidr')]"
		},
		"networkProfileForAdvanceNetworkPluginWithNetorkPolicy": {
			"loadBalancerSku": "standard",
			"networkPlugin": "[variables('networkPlugin')]",
			"networkPolicy": "None",
			"serviceCidr": "[variables('resourceServiceCidr')]",
			"dnsServiceIP": "[variables('resourceDnsServiceIP')]",
			"dockerBridgeCidr": "[variables('resourceDockerBridgeCidr')]"
		},
		"networkProfile": "[if(equals(variables('networkPlugin'),'kubenet'),if(equals(variables('networkPolicy'),'None'),variables('networkProfileForBasicNetworkPluginWithoutNetorkPolicy'), variables('networkProfileForBasicNetworkPluginWithNetorkPolicy')), if(equals(variables('networkPolicy'),'None'),variables('networkProfileForAdvanceNetworkPluginWithoutNetorkPolicy'), variables('networkProfileForAdvanceNetworkPluginWithNetorkPolicy')))]",
		"agentPoolType": "AvailabilitySet",
		"agentPoolProfilesForBaiscNetwork": [{
			"name": "agentpool",
			"osDiskSizeGB": 30,
			"count": 1,
			"vmSize": "Standard_D2s_v3",
			"osType": "[variables('primaryPoolOSType')]",
			"storageProfile": "ManagedDisks",
			"type": "[variables('agentPoolType')]",
			"mode": "System"
		}],
		"agentPoolProfiles": "[variables('agentPoolProfilesForBaiscNetwork')]",
		"servicePrincipalProfile": {
			"ClientId": "[json('null')]",
			"Secret": "[json('null')]",
			"aadSessionKey": "[json('null')]"
		},
		"resourceServicePrincipalProfile": "[if(equals(variables('authenticationMethod'),'true'),variables('servicePrincipalProfile'), json('{}'))]",
		"aciConnectorLinux": "[json('{}')]",
		"addonProfilesWithoutWorkspace": {
			"httpApplicationRouting": {
				"enabled": "[bool(variables('enableHttpApplicationRouting'))]"
			},
			"aciConnectorLinux": "[variables('aciConnectorLinux')]"
		},
		"resourceWorkspaceName": "[if(equals(variables('enableOmsAgent'),'false'),'dummy',if(equals(parameters('newLogAnalyticsWorkspaceRequired'),'Yes'),parameters('workspaceName'),'dummy'))]",
		"resourceWorkspaceRegion": "[if(equals(variables('enableOmsAgent'),'false'),'eastus',if(equals(parameters('newLogAnalyticsWorkspaceRequired'),'Yes'),variables('workspaceRegion'),'dummy'))]",
		"resourceOmsWorkspaceId": "[if(equals(variables('enableOmsAgent'),'true'),if(equals(parameters('newLogAnalyticsWorkspaceRequired'),'Yes'),resourceId('Microsoft.OperationalInsights/workspaces/',variables('resourceWorkspaceName')),'dummy'),'dummy')]",
		"workspaceResourceGroup": "[if(equals(variables('enableOmsAgent'),'false'),'dummy', split(variables('resourceOmsWorkspaceId'),'/')[4])]",
		"workspaceSubscriptionId": "[if(equals(variables('enableOmsAgent'),'false'),subscription().subscriptionId, split(variables('resourceOmsWorkspaceId'),'/')[2])]",
		"addonProfilesWithWorkspace": {
			"httpApplicationRouting": {
				"enabled": "[bool(variables('enableHttpApplicationRouting'))]"
			},
			"omsagent": {
				"enabled": "[bool(variables('enableOmsAgent'))]",
				"config": {
					"logAnalyticsWorkspaceResourceID": "[if(equals(variables('enableOmsAgent'),'false'),'dummy',variables('resourceOmsWorkspaceId'))]"
				}
			},
			"aciConnectorLinux": "[variables('aciConnectorLinux')]"
		},
		"resourceAddonProfiles": "[if(equals(variables('enableOmsAgent'),'true'),variables('addonProfilesWithWorkspace'), variables('addonProfilesWithoutWorkspace'))]",
		"clusterId": "[resourceId('Microsoft.ContainerService/managedClusters',parameters('kubernetesClusterName'))]",
		"subnetArray2": [{
			"name": "[variables('resourceSubnetName')]",
			"id": "[variables('vnetSubnetID')]",
			"properties": {
				"addressPrefix": "[variables('resourceSubnetPrefix')]"
			}
		}],
		"subnet": "[variables('subnetArray2')]"
	},
	"resources": [
	{
		"apiVersion": "2020-03-01",
		"type": "Microsoft.ContainerService/managedClusters",
		"location": "[variables('resourceLocation')]",
		"name": "[parameters('kubernetesClusterName')]",
		"properties": {
			"kubernetesVersion": "[parameters('kubernetesVersion')]",
			"enableRBAC": "[bool(variables('enableRBAC'))]",
			"dnsPrefix": "[parameters('dnsNamePrefix')]",
			"agentPoolProfiles": "[variables('agentPoolProfiles')]",
			"networkProfile": "[variables('networkProfile')]",
			"apiServerAccessProfile": {
				"enablePrivateCluster": "[bool(variables('enablePrivateCluster'))]"
			},
			"addonProfiles": "[variables('resourceAddonProfiles')]",
			"servicePrincipalProfile": "[variables('resourceServicePrincipalProfile')]"
		},
		"tags": {
			"application": "[parameters('applicationTag')]",
			"project": "[parameters('projectTag')]"
		},
		"identity": {
			"type": "SystemAssigned"
		}
	}, 
	{
		"condition": "[equals(variables('enableOmsAgent'),'true')]",
		"type": "Microsoft.Resources/deployments",
		"name": "SolutionDeployment",
		"apiVersion": "2019-08-01",
		"resourceGroup": "[variables('workspaceResourceGroup')]",
		"subscriptionId": "[variables('workspaceSubscriptionId')]",
		"properties": {
			"mode": "Incremental",
			"template": {
				"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
				"contentVersion": "1.0.0.0",
				"parameters": {},
				"variables": {},
				"resources": [{
					"apiVersion": "2015-11-01-preview",
					"type": "Microsoft.OperationsManagement/solutions",
					"location": "[variables('resourceWorkspaceRegion')]",
					"name": "[concat('ContainerInsights', '(', variables('resourceWorkspaceName'), ')')]",
					"properties": {
						"workspaceResourceId": "[if(equals(variables('enableOmsAgent'),'false'),'dummy',variables('resourceOmsWorkspaceId'))]"
					},
					"plan": {
						"name": "[concat('ContainerInsights', '(', variables('resourceWorkspaceName'), ')')]",
						"product": "[concat('OMSGallery/', 'ContainerInsights')]",
						"promotionCode": "",
						"publisher": "Microsoft"
					},
					"tags": {
						"application": "[parameters('applicationTag')]",
						"project": "[parameters('projectTag')]"
					}
				}]
			}
		},
		"tags": {
			"application": "[parameters('applicationTag')]",
			"project": "[parameters('projectTag')]"
		}
	}, {
		"condition": "[and(equals(variables('enableOmsAgent'),'true'),equals(parameters('newLogAnalyticsWorkspaceRequired'),'Yes'))]",
		"type": "Microsoft.Resources/deployments",
		"name": "WorkspaceDeployment",
		"apiVersion": "2019-08-01",
		"resourceGroup": "[variables('workspaceResourceGroup')]",
		"subscriptionId": "[variables('workspaceSubscriptionId')]",
		"properties": {
			"mode": "Incremental",
			"template": {
				"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
				"contentVersion": "1.0.0.0",
				"parameters": {},
				"variables": {},
				"resources": [{
					"apiVersion": "2015-11-01-preview",
					"type": "Microsoft.OperationalInsights/workspaces",
					"location": "[variables('resourceWorkspaceRegion')]",
					"name": "[variables('resourceWorkspaceName')]",
					"properties": {
						"sku": {
							"name": "standalone"
						}
					},
					"tags": {
						"application": "[parameters('applicationTag')]",
						"project": "[parameters('projectTag')]"
					}
				}]
			}
		},
			"tags": {
				"application": "[parameters('applicationTag')]",
				"project": "[parameters('projectTag')]"
			}
	}, {
		"condition": "[equals(variables('enableOmsAgent'),'true')]",
		"type": "Microsoft.Resources/deployments",
		"name": "ClusterMonitoringMetricPulisherRoleAssignmentDepl",
		"apiVersion": "2019-08-01",
		"resourceGroup": "[resourceGroup().name]",
		"subscriptionId": "[subscription().subscriptionId]",
		"properties": {
			"mode": "Incremental",
			"template": {
				"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
				"contentVersion": "1.0.0.0",
				"parameters": {},
				"variables": {},
				"resources": [{
					"type": "Microsoft.ContainerService/managedClusters/providers/roleAssignments",
					"apiVersion": "2018-01-01-preview",
					"name": "[concat(parameters('kubernetesClusterName'), '/', 'Microsoft.Authorization/', guid('AksClusterMonitoringMetricPulisher', uniqueString(deployment().name, resourceGroup().id)))]",
					"properties": {
						"roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3913510d-42f4-4e42-8a64-420c390055eb')]",
						"principalId": "[if(equals(variables('authenticationMethod'),'false'),reference(parameters('kubernetesClusterName')).addonProfiles.omsagent.identity.objectId, '753700cc-7776-4333-8598-ef87472e6208')]",
						"scope": "[variables('clusterId')]"
					}
				}]
			}
		},
		"dependsOn": ["[variables('clusterId')]"],
		"tags": {
			"application": "[parameters('applicationTag')]",
			"project": "[parameters('projectTag')]"
		}
	}, {
		"apiVersion": "2017-12-01-preview",
		"kind": "",
		"location": "[variables('resourceLocation')]",
		"name": "[parameters('serverName')]",
		"properties": "[variables('properties')]",
		"sku": {
			"name": "[variables('skuName')]",
			"tier": "[variables('skuTier')]",
			"capacity": "[variables('skuCapacity')]",
			"size": "[variables('skuSizeInMB')]",
			"family": "[variables('skuFamily')]"
		},
		"tags": {
			"application": "[parameters('applicationTag')]",
			"project": "[parameters('projectTag')]"
		},
		"type": "Microsoft.DBforMySQL/servers"
	}, {
		"type": "Microsoft.DBforMySQL/servers/firewallRules",
		"apiVersion": "2017-12-01",
		"name": "[concat(parameters('serverName'), '/AllowAllWindowsAzureIps')]",
		"dependsOn": ["[resourceId('Microsoft.DBforMySQL/servers', parameters('serverName'))]"],
		"properties": {
			"startIpAddress": "0.0.0.0",
			"endIpAddress": "0.0.0.0"
		},
		"tags": {
			"application": "[parameters('applicationTag')]",
			"project": "[parameters('projectTag')]"
		}
	}],
	"outputs": {
		"controlPlaneFQDN": {
			"type": "string",
			"value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('kubernetesClusterName'))).fqdn]"
		}
	}
}
